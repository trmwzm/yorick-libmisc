# where are the sources? (automatically filled in by configure script)
srcdir=.

# these values filled in by "yorick -batch make.i" or configure script
Y_MAKEDIR=
Y_EXE=
Y_EXE_PKGS=
Y_EXE_HOME=
Y_EXE_SITE=
Y_HOME_PKG=
Y_EXE_DIR:=$(shell dirname $(Y_EXE))

# ------------------------------------------------ macros for this package

PKG_NAME=yorick-libmisc

# include files for this package
PKG_I=${srcdir}/ascii.i \
      ${srcdir}/convcorrel.i \
      ${srcdir}/dbase.i \
      ${srcdir}/dsp.i \
      ${srcdir}/detect.i \
      ${srcdir}/fcomplex.i \
      ${srcdir}/memfmap.i \
      ${srcdir}/pocs.i \
      ${srcdir}/rdf.i \
      ${srcdir}/rotation.i \
      ${srcdir}/density.i \
      ${srcdir}/shellargs.i \
      ${srcdir}/yut.i \
      ${srcdir}/bicub.i \
      ${srcdir}/coreg.i \
      ${srcdir}/digfun.i \
      ${srcdir}/fitpoly.i \
      ${srcdir}/fpanels.i \
      ${srcdir}/imbinavrg.i \
      ${srcdir}/inpolygon.i \
      ${srcdir}/lmfit.i \
      ${srcdir}/poly_fit.i \
      ${srcdir}/rdf-refac.i \
      ${srcdir}/rwflat.i \
      ${srcdir}/time.i \
      ${srcdir}/gaupro.i \
      ${srcdir}/nninterp2.i \
      ${srcdir}/histop.i \
      ${srcdir}/moveop.i \
      ${srcdir}/prstruct.i \
      ${srcdir}/rdcols.i \
      ${srcdir}/plcm.i \
      ${srcdir}/levmar_tools.i \
      ${srcdir}/scm.i \
      ${srcdir}/json.i \
      ${srcdir}/vec2d.i

# autoload file for this package, if any
PKG_I_START= ${srcdir}/libmisc-start.i

# non-pkg.i include files for this package, if any
PKG_I_EXTRA=

PKG_BIN=${srcdir}/yoo \
        ${srcdir}/shbang \
        ${srcdir}/ynvoke

RELEASE_FILES = AUTHORS LICENSE Makefile NEWS README.md \
	configure ${PKG_I} ${PKG_I_START} ${PKG_BIN}
RELEASE_NAME = $(PKG_NAME)-$(RELEASE_VERSION).tar.bz2

# --------------------------------------- standard macros for all packages

# installation directories
DESTDIR=
DEST_Y_SITE=$(DESTDIR)$(Y_EXE_SITE)
DEST_Y_HOME=$(DESTDIR)$(Y_EXE_HOME)
DEST_Y_BINDIR=$(DESTDIR)$(Y_BINDIR)

# installation commands
Y_LIBEXE=$(Y_EXE_HOME)/lib
Y_GROUP=`cat $(Y_LIBEXE)/install.grp`
YNSTALL=$(Y_LIBEXE)/install.sh $(Y_GROUP)

# -------------------------------------------- standard targets and rules

default: all

all:
	@echo "Nothing to do, execute 'make install' to install"

install:
	@if test -n "$(PKG_I)" -o -n "$(PKG_I_EXTRA)"; then \
	  for file in $(PKG_I) $(PKG_I_EXTRA); do \
	    echo "Installing $$file in Y_HOME/i"; \
	    $(YNSTALL) "$$file" $(DEST_Y_HOME)/i; \
	  done; \
	fi; \
	if test -n "$(PKG_I_START)"; then \
	  for file in $(PKG_I_START); do \
	    echo "Installing $$file in Y_HOME/i-start"; \
	    $(YNSTALL) "$$file" $(DEST_Y_HOME)/i-start; \
	  done; \
	fi; \
  if test -n "$(PKG_BIN)"; then \
	  for file in $(PKG_BIN); do \
	    echo "Installing $$file in $(Y_EXE_DIR)"; \
	    $(YNSTALL) "$$file" $(Y_EXE_DIR); \
	  done; \
	fi


uninstall:
	@if test -n "$(PKG_I)" -o -n "$(PKG_I_EXTRA)"; then \
	  for file in $(PKG_I) $(PKG_I_EXTRA); do \
	    base=`basename "$$file"`; \
	    full="$(DEST_Y_HOME)/i/$$base"; \
	    if test -f "$$full"; then \
	      echo "Uninstalling $$base from Y_HOME/i"; \
	      $(RM) "$$full"; \
	    fi; \
	  done; \
	fi; \
	if test -n "$(PKG_I_START)"; then \
	  for file in $(PKG_I_START); do \
	    base=`basename "$$file"`; \
	    full="$(DEST_Y_HOME)/i-start/$$base"; \
	    if test -f "$$full"; then \
	      echo "Uninstalling $$base from Y_HOME/i-start"; \
	      $(RM) "$$full"; \
	    fi; \
	  done; \
	fi; \
  if test -n "$(PKG_BIN)"; then \
	  for file in $(PKG_BIN); do \
	    echo "Uninstalling $$file from $(Y_EXE_DIR)"; \
	    $(RM)  $(Y_EXE_DIR)"/$$file"; \
	  done; \
	fi

clean:
	rm -f *~ core* *.core

# ylib-start-tmp.i: ${PKG_I}
# 	rm -f $@
# 	for x in ${PKG_I}; do \
# 	  echo -n "autoload, \"$$x\", " >> $@; \
# 	  grep <$$x -E '^[ 	]*func[ 	]+[^_]' \
# 	  | sed -e 's/^[ 	]*func[ 	][ 	]*\([_0-9A-Za-z]*\).*/\1/' >> $@; \
# 	done


release: $(RELEASE_NAME)

$(RELEASE_NAME):
	@if test "x$(RELEASE_VERSION)" = "x"; then \
	  echo >&2 "set package version:  make RELEASE_VERSION=... release"; \
	else \
          dir=`basename "$(RELEASE_NAME)" .tar.bz2`; \
	  if test "x$$dir" = "x" -o "x$$dir" = "x."; then \
	    echo >&2 "bad directory name for archive"; \
	  elif test -d "$$dir"; then \
	    echo >&2 "directory $$dir already exists"; \
	  else \
	    mkdir -p "$$dir"; \
	    for file in $(RELEASE_FILES); do \
	      file=`basename "$$file"`; \
	      src="$(srcdir)/$$file"; \
	      dst="$$dir/$$file"; \
	      if test "$$file" = "Makefile"; then \
	        sed <"$$src" >"$$dst" -e 's/^\( *Y_\(MAKEDIR\|EXE\(\|_PKGS\|_HOME\|_SITE\)\|HOME_PKG\) *=\).*/\1/'; \
	        touch -r "$$src" "$$dst"; \
	      else \
	        cp -p "$$src" "$$dst"; \
	      fi; \
	    done; \
	    rm -f "$$dir"/*~ "$$dir"/*/*~; \
	    echo "$(RELEASE_VERSION)" > "$$dir/VERSION"; \
	    tar jcf "$(RELEASE_NAME)" "$$dir"; \
	    rm -rf "$$dir"; \
	    echo "$(RELEASE_NAME) created"; \
	  fi; \
	fi;

.PHONY: clean release all install uninstall default

# -------------------------------------------------------- end of Makefile
